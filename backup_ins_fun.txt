def setupIns(self):
      self.log_sth(f"base_path:{self.base_path};energy_source:{self.energy_source};solution_name:{self.solution_name}")
      try:
        if self.energy_source == "header":
          if os.path.exists(f"{self.base_path}/{self.name}.ins") and os.path.getsize(f"{self.base_path}/{self.name}.ins")>0:
            os.rename(f"{self.base_path}/{self.name}.ins", f"{self.base_path}/{self.name}_old.ins")
            energy = self.name.split("_")[-1].split(".")[0]
            try:
              wl = ret_wl(float(energy))
            except:
              self.log_sth("Filename format not fitting for Energy extraction!")
            if self.solution_name.split(".")[0] == self.name: 
              self.solution_name = f"{self.name}_old.ins"
            with open(f"{self.base_path}/{self.name}.ins", "w") as ins:
              with open(f"{self.base_path}/{self.solution_name}", "r") as solution:
                for line in solution:
                  if "CELL" in line:
                    buffer = line.split(" ")
                    buffer[1] = str(round(wl, 6))
                    line = " ".join(buffer)
                  ins.write(line)
            self.final_ins_path = f"{self.base_path}/{self.name}.ins"
            self.log_sth(f"Set final ins path to: {self.base_path}/{self.name}.ins")  
            try:
              self.correct_ins()
            except:
              self.log_sth("Could not correct the ins for DISP source!")           
          else:
            self.log_sth("No .ins file copied or empty .ins! Check if there was a usable .ins file in the original extraction folder (hkl with this name)!")
        elif self.energy_source == "ins":
          if os.path.exists(f"{self.base_path}/{self.name}.ins") and os.path.getsize(f"{self.base_path}/{self.name}.ins")>0:
            os.rename(f"{self.base_path}/{self.name}.ins", f"{self.base_path}/{self.name}_old.ins")
            if self.solution_name.split(".")[0] == self.name: 
              self.solution_name = f"{self.name}_old.ins"
            with open(f"{self.base_path}/{self.name}.ins", "w") as ins:
              with open(f"{self.base_path}/{self.name}_old.ins", "r") as en_ins:
                cell = ""
                for line in en_ins:
                  if "CELL" in line:
                    cell = line
                with open(f"{self.base_path}/{self.solution_name}") as solution:
                  for line in solution:
                    if "CELL" in line:
                      line = cell
                    ins.write(line)
            self.final_ins_path = f"{self.base_path}/{self.name}.ins"
            self.log_sth(f"Set final ins path to: {self.base_path}/{self.name}.ins")
            try:
              self.correct_ins()
            except:
              self.log_sth("Could not correct the ins for DISP source!")
          else:
            self.log_sth("No .ins file copied or empty .ins! Check if there was a usable .ins file in the original extraction folder (hkl with this name)!")
        else:                                                             #works now 23.01.2023, introduced "solution.ins"
          if self.solution_name.split(".")[0] == self.name:               #check if the solution ins is of this exact name 
            self.log_sth("ins names the same!")
            self.final_ins_path = f"{self.base_path}/{self.name}.ins"
            self.log_sth(f"Set final ins path to: {self.base_path}/{self.name}.ins")
          elif os.path.exists(f"{self.base_path}/{self.name}.ins"):       #check if the ins is there
            self.log_sth("ins path exists!")
            os.rename(f"{self.base_path}/{self.name}.ins", f"{self.base_path}/{self.name}_old.ins")       #save old ins 
            with open(f"{self.base_path}/{self.name}.ins", "w") as ins:
              with open(f"{self.base_path}/solution.ins", "r") as solution:
                for line in solution:
                    ins.write(line)
            self.final_ins_path = f"{self.base_path}/{self.name}.ins"
            self.log_sth(f"Set final ins path to: {self.base_path}/{self.name}.ins")
            try:
              self.correct_ins()
            except:
              self.log_sth("Could not correct the ins for DISP source!")
          else:
            self.log_sth("No .ins file copied over here! Check if there was an .ins file in the original extraction folder (hkl with this name)!")
        
      except:
        self.log_sth("Was not able to recieve a final .ins path!")